/* gnome-bluetooth-3.0.vapi generated by vapigen, do not modify. */

[CCode (cprefix = "Bluetooth", gir_namespace = "GnomeBluetooth", gir_version = "3.0", lower_case_cprefix = "bluetooth_")]
namespace Bluetooth {
	[CCode (cheader_filename = "GnomeBluetooth-3.0.h", type_id = "bluetooth_client_get_type ()")]
	public class Client : GLib.Object {
		[CCode (has_construct_function = false)]
		public Client ();
		public async bool connect_service (string path, bool connect, GLib.Cancellable? cancellable) throws GLib.Error;
		public GLib.ListStore get_devices ();
		public bool has_connected_input_devices ();
		[NoAccessorMethod]
		public string default_adapter { owned get; }
		[NoAccessorMethod]
		public string default_adapter_address { owned get; }
		[NoAccessorMethod]
		public string default_adapter_name { owned get; }
		[NoAccessorMethod]
		public bool default_adapter_powered { get; set; }
		[NoAccessorMethod]
		public bool default_adapter_setup_mode { get; set; }
		[NoAccessorMethod]
		public uint num_adapters { get; }
		public signal void device_added (GLib.Object device);
		public signal void device_removed (string device);
	}
	[CCode (cheader_filename = "GnomeBluetooth-3.0.h", type_id = "bluetooth_device_get_type ()")]
	public class Device : GLib.Object {
		[CCode (has_construct_function = false)]
		protected Device ();
		public void dump ();
		public unowned string get_object_path ();
		public string to_string ();
		[NoAccessorMethod]
		public string address { owned get; set; }
		[NoAccessorMethod]
		public string alias { owned get; set; }
		[NoAccessorMethod]
		public uint battery_level { get; set; }
		[NoAccessorMethod]
		public double battery_percentage { get; set; }
		[NoAccessorMethod]
		public bool connectable { get; }
		[NoAccessorMethod]
		public bool connected { get; set; }
		[NoAccessorMethod]
		public string icon { owned get; set; }
		[NoAccessorMethod]
		public bool legacy_pairing { get; set; }
		[NoAccessorMethod]
		public string name { owned get; set; }
		[NoAccessorMethod]
		public bool paired { get; set; }
		[NoAccessorMethod]
		public GLib.DBusProxy proxy { owned get; set; }
		[NoAccessorMethod]
		public bool trusted { get; set; }
		[CCode (array_length = false, array_null_terminated = true)]
		[NoAccessorMethod]
		public string[] uuids { owned get; set; }
	}
	[CCode (cheader_filename = "GnomeBluetooth-3.0.h", cprefix = "BLUETOOTH_BATTERY_TYPE_", has_type_id = false)]
	public enum BatteryType {
		NONE,
		PERCENTAGE,
		COARSE
	}
	[CCode (cheader_filename = "GnomeBluetooth-3.0.h", cprefix = "BLUETOOTH_TYPE_", has_type_id = false)]
	[Flags]
	public enum Type {
		ANY,
		PHONE,
		MODEM,
		COMPUTER,
		NETWORK,
		HEADSET,
		HEADPHONES,
		OTHER_AUDIO,
		KEYBOARD,
		MOUSE,
		CAMERA,
		PRINTER,
		JOYPAD,
		TABLET,
		VIDEO,
		REMOTE_CONTROL,
		SCANNER,
		DISPLAY,
		WEARABLE,
		TOY,
		SPEAKERS;
		public static unowned string to_string (uint type);
	}
	[CCode (cheader_filename = "GnomeBluetooth-3.0.h", cname = "BLUETOOTH_TYPE_AUDIO")]
	public const int TYPE_AUDIO;
	[CCode (cheader_filename = "GnomeBluetooth-3.0.h", cname = "BLUETOOTH_TYPE_INPUT")]
	public const int TYPE_INPUT;
	[CCode (cheader_filename = "GnomeBluetooth-3.0.h")]
	public static Bluetooth.Type appearance_to_type (uint16 appearance);
	[CCode (cheader_filename = "GnomeBluetooth-3.0.h")]
	public static Bluetooth.Type class_to_type (uint32 @class);
	[CCode (cheader_filename = "GnomeBluetooth-3.0.h")]
	public static bool send_to_address (string address, string alias) throws GLib.Error;
	[CCode (cheader_filename = "GnomeBluetooth-3.0.h")]
	public static unowned string uuid_to_string (string uuid);
	[CCode (cheader_filename = "GnomeBluetooth-3.0.h")]
	public static bool verify_address (string bdaddr);
}
